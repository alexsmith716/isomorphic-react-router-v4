{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww21900\viewh16280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \
"react":\
	* An npm package to get you immediate access to React\
	* by default, React will be in development mode.\
	* The development version includes extra warnings about common mistakes\
	* the production version includes extra performance optimizations and strips all error messages\
	* To use React in production mode, set the environment variable `NODE_ENV` to `production`\
	* dead-code elimination (UglifyJS) is recommended to remove extra code in development mode\
\
\
####################################################################################\
"react-dom": \
	* This package serves as the entry point of the DOM-related rendering paths. \
	* It is intended to be paired with the isomorphic React, which will be shipped as `react` to npm.\
\
"react-router":\
	* \cf2 \expnd0\expndtw0\kerning0
React Router keeps application UI and the URL in sync\cf0 \kerning1\expnd0\expndtw0 \
	* React Router is a complete routing library for React\
	* React Router keeps your UI in sync with the URL. \
	* The API enables lazy code loading, dynamic route matching, and location transition handling.\
	* Make the URL your first thought, not an after-thought.\
	* exports the core components and functions\
####################################################################################\
\
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
For those who don\'92t know what react-router-dom is and the difference between them, \
the short answer is that react-router includes both react-router-dom and react-router-native. \
For a web based project react-router-dom is usually what you need.\cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
You will probably want to use react-router-dom for 99.9% of web dev.\
\cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
"react-router-dom":\
	* DOM bindings for React Router\
	* exports DOM-aware components (<Link>, <BrowserRouter>)\
	* react-router-dom re-exports all of react-router's exports\
	* you only need to import from react-router-dom in your project.\
	* use react-router-dom for 99.9% of web dev\
\
"react-redux":\
	* React bindings for Redux\
	* requires module bundler like webpack to consume CommonJS modules\
\
"react-router-redux":\
	* bindings to keep react-router and redux in sync\
\
"react-router-config":\
	* Static route configuration helpers for React Router\
	* With the introduction of React Router v4, there is no longer a centralized route configuration\
	* There are some use-cases where it is valuable to know about all the app's potential routes such as:\
	* Loading data on the server or in the lifecycle before rendering the next screen\
	* Linking to routes by name\
	* Static analysis\
\
"react-addons-create-fragment":\
"react-paginate":\
"react-scripts":\
"react-svg-inline":\
"react-bootstrap":\
"react-select":\
"react-addons-css-transition-group":\
"react-dropzone":\
"react-paginate":\
\
############################################################\
############################################################\
############################################################\
\
"redux":\
	* a state management library\
	* Redux is a predictable state container for JavaScript apps\
	* It helps write applications that behave consistently, run in (client, server, and native), and are easy to test\
	* it provides live code editing combined with a time traveling debugger\
	* enables Hot Reloading with Time Travel\
	* enables logging, hot reloading, time travel, universal apps, record and replay\
	* Redux evolves the ideas of Flux, but avoids its complexity by taking cues from Elm\
	* Redux is consumed as a collection of modules. \
	* These modules are what you get when you import `redux` in a Webpack or Node environment\
	* no bundler, precompiled production and development builds are in the `dist` folder\
	* Redux is written in ES2015 but we precompile both CommonJS and UMD builds to ES5\
	* Most likely, you'll also need react-redux and redux-devtools\
	* The whole state of your app is stored in an object tree inside a single *store*.  \
	* The only way to change the state tree is to emit an *action*, an object describing what happened.  \
	* To specify how the actions transform the state tree, you write pure *reducers*. webpack\
\
"thunk":\
	* thunk i\cf2 \expnd0\expndtw0\kerning0
s a function that wraps an expression to delay its evaluation.\cf0 \kerning1\expnd0\expndtw0 \
	* composer for all JavaScript asynchronous\
	* thunk is a function that encapsulates synchronous or asynchronous code\
	* thunk accepts only one callback function as an arguments, which is a CPS function\
	* \cf2 \expnd0\expndtw0\kerning0
thunk returns another thunk function after being called, for chaining operations.\cf0 \kerning1\expnd0\expndtw0 \
	* \cf2 \expnd0\expndtw0\kerning0
thunk passes the results into a callback function after being excuted.\cf0 \kerning1\expnd0\expndtw0 \
	* \cf2 \expnd0\expndtw0\kerning0
If the return value of callback is a thunk function, it will be executed first and its result will be sent to another thunk for excution,\
	* or it will be sent to another new thunk function as the value of the computation.\cf0 \kerning1\expnd0\expndtw0 \
\
"redux-thunk":\
	* \cf2 \expnd0\expndtw0\kerning0
Thunk middleware for Redux\
	* allows you to write action creators that return a function instead of an action\
	* The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. \
	* The inner function receives the store methods dispatch and getState as parameters.\cf0 \kerning1\expnd0\expndtw0 \
\
\
"redux-saga":\
	* \cf2 \expnd0\expndtw0\kerning0
makes application side effects (i.e. asynchronous things like data fetching and impure things like accessing the browser cache) easier to manage, \
	* more efficient to execute, simple to test, and better at handling failures.\
	* saga is like a separate thread in your application that's solely responsible for side effects. \
	* its is a redux middleware, which means this thread can be started, paused and cancelled from the main application with normal redux actions, \
	* it has access to the full redux application state and it can dispatch redux actions as well.\
	* It uses an ES6 feature called Generators to make those asynchronous flows easy to read, write and test\
	* You might've used redux-thunk before to handle your data fetching. \
	* Contrary to redux thunk, you don't end up in callback hell, you can test your asynchronous flows easily and your actions stay pure.\
\
\
"history":\
	* is a JavaScript library that lets you easily manage session history anywhere JavaScript runs. \
	* `history` abstracts away the differences in various environments\
	* and provides a minimal API that lets you manage the history stack, navigate, confirm navigation, and persist state between sessions.\
	* import createHistory from 'history/createBrowserHistory'\
\
\
"React Router Config":\
	* Static route configuration helpers for React Router.\
	* With the introduction of React Router v4, there is no longer a centralized route configuration.\
	* There are some use-cases where it is valuable to know about all the app's potential routes such as:\
		- Loading data on the server or in the lifecycle before rendering the next screen\
		- Linking to routes by name\
		- Static analysis\
	* Routes are objects with the same properties as a `<Route>` with a couple differences:\
		- the only render prop it accepts is `component` (no `render` or `children`)\
		- introduces the `routes` key for sub routes\
		- add any additional props to a route, access `props.route` inside the `component`, this object is a reference to the object used to render and match.\
		- accepts `key` prop to prevent remounting component when transition was made from route with the same component and same `key` prop\
\
\
"React Router Config":\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf2 	* Previous versions of React Router used static routes to configure your application's routing. \
	* This allows for inspection and matching of routes before rendering. \
	* Since v4 moved to dynamic components instead of route configs, some previous use-cases became less obvious and tricky.\
	* "React Router Config" is a package to work with static route configs and React Router, to continue to meet those use-cases.
\f1\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf2 	* // wrap in withRouter\
	* export default withRouter(PendingNavDataLoader)\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \
\
"redux-storage-engine-localstorage":\
"redux-storage":\
"redux-form":\
"redux-connect":\
"redux-watch":\
"redux-api-middleware":\
"redux-logger":\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}